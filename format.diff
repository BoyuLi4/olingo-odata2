From f833e7daf941275de72e3b4819221a28a747dc52 Mon Sep 17 00:00:00 2001
From: Archana Rai <archana.rai@sap.com>
Date: Mon, 29 May 2017 13:45:48 +0530
Subject: [PATCH] [OLINGO-1133]Support for Accept-Language value xx-xxx-xx format

Change-Id: Idabd1112b32f0ae433a319065924a84f4583c0a7
Signed-off-by: Archana Rai <archana.rai@sap.com>
---

diff --git a/odata2-lib/odata-core/src/main/java/org/apache/olingo/odata2/core/batch/AcceptParser.java b/odata2-lib/odata-core/src/main/java/org/apache/olingo/odata2/core/batch/AcceptParser.java
index 3130942..f1c2e73 100644
--- a/odata2-lib/odata-core/src/main/java/org/apache/olingo/odata2/core/batch/AcceptParser.java
+++ b/odata2-lib/odata-core/src/main/java/org/apache/olingo/odata2/core/batch/AcceptParser.java
@@ -40,7 +40,7 @@
   private static final Pattern REG_EX_ACCEPT_WITH_Q_FACTOR = Pattern.compile(REG_EX_ACCEPT + "(?:;"
       + REG_EX_OPTIONAL_WHITESPACE + REG_EX_QUALITY_FACTOR + ")?");
   private static final Pattern REG_EX_ACCEPT_LANGUAGES = Pattern
-      .compile("((?:(?:[a-z]{1,8})|(?:\\*))\\-?(?:[a-zA-Z0-9]{1,8})?)");
+      .compile("((?:(?:[a-z]{1,8})|(?:\\*))(?:-[a-zA-Z0-9]{1,8}){0,3})");
   private static final Pattern REG_EX_ACCEPT_LANGUAGES_WITH_Q_FACTOR = Pattern.compile(REG_EX_ACCEPT_LANGUAGES + "(?:;"
       + REG_EX_OPTIONAL_WHITESPACE + REG_EX_QUALITY_FACTOR + ")?");
 
diff --git a/odata2-lib/odata-core/src/test/java/org/apache/olingo/odata2/core/batch/AcceptParserTest.java b/odata2-lib/odata-core/src/test/java/org/apache/olingo/odata2/core/batch/AcceptParserTest.java
index b1baaa7..23e9858 100644
--- a/odata2-lib/odata-core/src/test/java/org/apache/olingo/odata2/core/batch/AcceptParserTest.java
+++ b/odata2-lib/odata-core/src/test/java/org/apache/olingo/odata2/core/batch/AcceptParserTest.java
@@ -78,7 +78,52 @@
     assertEquals("application/json;" + TAB + "odata=verbose", acceptHeaders.get(0));
     assertEquals("*/*", acceptHeaders.get(1));
   }
-
+  
+  @Test
+  public void testSpecialAcceptLanguage() throws BatchException {
+    AcceptParser parser = new AcceptParser();
+    parser.addAcceptLanguageHeaderValue("en-US-x-XXXXXX");
+    List<String> acceptLanguageHeaders = parser.parseAcceptableLanguages();
+    assertNotNull(acceptLanguageHeaders);
+    assertEquals(1, acceptLanguageHeaders.size());
+    assertEquals("en-US-x-XXXXXX", acceptLanguageHeaders.get(0)); 
+  }
+  
+  @Test(expected = BatchException.class)
+  public void testInvalidAcceptLanguage1() throws BatchException {
+    AcceptParser parser = new AcceptParser();
+    parser.addAcceptHeaderValue("en-US-x-xxxx-");
+    parser.parseAcceptHeaders();
+  }
+  
+  @Test(expected = BatchException.class)
+  public void testInvalidAcceptLanguage2() throws BatchException {
+    AcceptParser parser = new AcceptParser();
+    parser.addAcceptLanguageHeaderValue("en-US-");
+    parser.parseAcceptableLanguages();
+  }
+  
+  @Test(expected = BatchException.class)
+  public void testInvalidAcceptLanguage3() throws BatchException {
+    AcceptParser parser = new AcceptParser();
+    parser.addAcceptLanguageHeaderValue("en-US-x-XXX-XXXX");
+    parser.parseAcceptableLanguages();
+  }
+  
+  @Test(expected = BatchException.class)
+  public void testInvalidAcceptLanguage4() throws BatchException {
+    AcceptParser parser = new AcceptParser();
+    parser.addAcceptLanguageHeaderValue("en-US-x-$%");
+    parser.parseAcceptableLanguages();
+  }
+  
+  @Test(expected = BatchException.class)
+  public void testInvalidAcceptLanguage5() throws BatchException {
+    AcceptParser parser = new AcceptParser();
+    parser.addAcceptLanguageHeaderValue("en-");
+    parser.parseAcceptableLanguages();
+  }
+  
   @Test
   public void testAcceptHeaderWithTwoParameters() throws BatchException {
     AcceptParser parser = new AcceptParser();
